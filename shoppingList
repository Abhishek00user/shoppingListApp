package com.example.shoppinglistapp

import androidx.compose.foundation.BorderStroke
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.wrapContentSize
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.BasicTextField
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Delete
import androidx.compose.material.icons.filled.Edit
import androidx.compose.material3.AlertDialog
import androidx.compose.material3.Button
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.BlendMode.Companion.Color
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.unit.dp

data class ShoppingItem(
    val id:Int,
    var name:String,
    var quantity:Int,
    var isEditing:Boolean=false
)

 @Composable
fun ShoppingListApp(){
    var sItems by remember { mutableStateOf(listOf<ShoppingItem>()) }
     var showDialog by remember { mutableStateOf(false) }
     var itemName by remember { mutableStateOf("") }
     var itemQuantity by remember { mutableStateOf("") }
     Column(
         modifier=Modifier.fillMaxSize(),
         verticalArrangement= Arrangement.Center
     ){
         Button(onClick = { showDialog=true },
             modifier=Modifier.align(Alignment.CenterHorizontally)
         ){
            Text(text = "Add Item")
         }
         LazyColumn(
             modifier= Modifier
                 .fillMaxSize()
                 .padding(16.dp)
         ){
             items(sItems){
//         instead of using it ,we can give it a name but we have to use name->
                 element ->
                 if(element.isEditing){
                     ShoppingItemEditor(item = element, onEditComplete ={
//                     onEditComplete is like its  saying , hey we are done editing
                         editedName,editedQuantity ->
//                         we are copying the item and then we are setting is editing to false
                         sItems=sItems.map{it.copy(isEditing = false)}
//                         after editing has been completed we have to make sure that the item should
//                   be stored in editedItem.WE are doing it by matching the edited element id with the
//                         item of the list
                         val editedElement=sItems.find { it.id==element.id }
//                         unpack the item
                         editedElement?.let {
                             it.name=editedName
                             it.quantity=editedQuantity
                         }
                     } )
                 }else{
                     ShoppingListItem(item =element , onEditClick = {
//                   how do we know which edited button did i click,because there are many items on
//                         the screen and so are the edited buttons
                         sItems=sItems.map{it.copy(isEditing = it.id==element.id )}
                     },onDeleteClick={
                         sItems=sItems-element
                     })
                 }
             }
         }
     }
     if(showDialog){
        AlertDialog(onDismissRequest = { showDialog=false },
            confirmButton = {
                      Row(
                          modifier = Modifier
                              .fillMaxWidth()
                              .padding(8.dp),
                          horizontalArrangement = Arrangement.SpaceBetween
                      ){
                          Button(onClick = {
//                              if the container of the item name is not empty
                              if(itemName.isNotBlank()){
                                  val newItem=ShoppingItem(
                                      id=sItems.size+1,
                                      name=itemName,
                                      quantity=itemQuantity.toInt()
                                  )
                                  sItems=sItems+newItem
                                  showDialog=false
//             since we don't want the prev input to be displayed when clicking on add item again
                                  itemName=""
                              }
                          }) {
                              Text(text = "Add Item")
                          }
                          Button(onClick = { showDialog=false }) {
                              Text(text = "Cancel")
                          }
                      }
            },
            title = { Text(text = "Add shopping Item")},
            text={
                Column{
                    OutlinedTextField(value = itemName,
                        onValueChange ={itemName=it},
                        singleLine = true,
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(8.dp)
                    )

                    OutlinedTextField(value = itemQuantity,
                        onValueChange ={itemQuantity=it},
                        singleLine = true,
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(8.dp)
                    )
                }
            }
        )
     }
}

@Composable
fun ShoppingItemEditor(item:ShoppingItem,onEditComplete: (String,Int) -> Unit ){
//    it stores the initialised name of the item
    var editedName by remember { mutableStateOf(item.name) }
    var editedQuantity by remember { mutableStateOf(item.quantity.toString()) }
//    isEditing will store the initial state of isEditing
    var isEditing by remember { mutableStateOf(item.isEditing) }

    Row(modifier= Modifier
        .fillMaxWidth()
        .background(androidx.compose.ui.graphics.Color.White)
        .padding(8.dp),
        horizontalArrangement = Arrangement.SpaceEvenly
    ){
        Column{
            BasicTextField(
                value = editedName,
                onValueChange = {editedName=it},
                singleLine = true,
                modifier= Modifier
                    .wrapContentSize()
                    .padding(8.dp)
            )
            BasicTextField(
                value = editedQuantity,
                onValueChange = {editedQuantity=it},
                singleLine = true,
                modifier= Modifier
                    .wrapContentSize()
                    .padding(8.dp)
            )
        }
        Button(
            onClick = {
               isEditing=false
               onEditComplete(editedName,editedQuantity.toIntOrNull() ?: 1)
            }
        ){
            Text("Save")
        }
    }
}

@Composable
fun ShoppingListItem(
    item: ShoppingItem,
    onEditClick : () -> Unit,
    onDeleteClick: () -> Unit
){
    Row(
        modifier= Modifier
            .padding(8.dp)
            .fillMaxWidth()
            .border(
                BorderStroke(2.dp, Color(0XFF018786)),
                shape = RoundedCornerShape(20)
            )
    ) {
        Text(text = item.name,modifier=Modifier.padding(8.dp))
        Text(text = "Qty : ${item.quantity}",modifier=Modifier.padding(8.dp))
//        since it's already in the row so we don't need row again but let's seee
        Row(modifier=Modifier.padding(8.dp)) {
            IconButton(onClick = onEditClick) {
                Icon(imageVector= Icons.Default.Edit,contentDescription = null)
            }
            IconButton(onClick = onDeleteClick) {
                Icon(imageVector= Icons.Default.Delete,contentDescription = null)
            }
        }
    }
}
